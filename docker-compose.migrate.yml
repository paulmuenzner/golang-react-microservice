# docker-compose.migrate.yml

version: "3.9"
services:
  
  postgres:
    image: docker.io/library/postgres:${POSTGRES_VERSION}-alpine
    container_name: ${POSTGRES_HOST}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}           
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}   
      POSTGRES_DB: ${POSTGRES_NAME}            
    ports:
      - "${PORT_POSTGRES}:5432"
    volumes:
      - ${VOLUME_POSTGRES}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 3s
      timeout: 3s
      retries: 10
    networks:
      - ${NETWORK_BACKEND}

  # Central migration service (only migrator)
  db-migrator:
    build:
      context: .
      dockerfile: shared/go/utils/db/migrator/Dockerfile.migrator
      args:
        GO_VERSION: ${GO_VERSION}
    container_name: ${CONTAINER_MIGRATOR}
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # PostgreSQL connection
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_NAME}
      DB_SSLMODE: ${DB_SSLMODE_DEV}
      
      # Connection Pool
      POSTGRES_MAX_OPEN_CONNS: ${POSTGRES_MAX_OPEN_CONNS}
      POSTGRES_MAX_IDLE_CONNS: ${POSTGRES_MAX_IDLE_CONNS}

      # MIGRATION CONTROL: These must be passed from the Makefile
      MIGRATION_DIRECTION: ${MIGRATION_DIRECTION}
      ROLLBACK_STEPS: ${ROLLBACK_STEPS}
      
      # Migration root (in container)
      MIGRATIONS_ROOT: /build/migrations
      
      # Optional: for future DBs
      # VECTOR_DB_HOST: qdrant
      # GRAPH_DB_HOST: neo4j
    restart: "no"  
    networks:
      - ${NETWORK_BACKEND}

# Use same volumes and networks as main docker-compose.yml
volumes:
  postgres-data:
    name: ${VOLUME_POSTGRES}

networks:
  backend:
    name: ${NETWORK_BACKEND}
    driver: bridge