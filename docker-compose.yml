# docker-compose.yml
version: "3.9"

services:
  gateway:
    container_name: gateway-dev
    build:
      context: . 
      dockerfile: app/backend/gateway/Dockerfile
      target: dev
      args:
        GO_VERSION: ${GO_VERSION}
    ports:
      - "8080:8080"   # Only gateway is exposed to host
    volumes:
      - ./app/backend/gateway:/build/app/backend/gateway:cached
      - ./shared/go:/build/shared/go:cached
      - /build/app/backend/gateway/tmp
    environment:
      - ENVIRONMENT=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      service-a:
        condition: service_healthy
      service-b:
        condition: service_healthy
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - frontend
      - backend

  service-a:
    container_name: service-a-dev
    build:
      context: .
      dockerfile: app/backend/service-a/Dockerfile
      target: dev
      args:
        GO_VERSION: ${GO_VERSION}
    expose:
      - "8080"
    volumes:
      - ./app/backend/service-a:/build/app/backend/service-a:cached
      - ./shared/go:/build/shared/go:cached
      - /build/app/backend/service-a/tmp
    environment:
      - ENVIRONMENT=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 5
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - backend

  service-b:
    container_name: service-b-dev
    build:
      context: .
      dockerfile: app/backend/service-b/Dockerfile
      target: dev
      args:
        GO_VERSION: ${GO_VERSION}
    expose:
      - "8080"
    volumes:
      - ./app/backend/service-b:/build/app/backend/service-b:cached
      - ./shared/go:/build/shared/go:cached
      - /build/app/backend/service-b/tmp
    environment:
      - ENVIRONMENT=development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 5
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - backend

  # ==========================================
  # LOGGING STACK (NEU)
  # ==========================================
  
  loki:
    image: docker.io/grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - backend

  promtail:
    image: docker.io/grafana/promtail:2.9.0
    container_name: promtail
    volumes:
      - /run/user/1000/podman/podman.sock:/var/run/docker.sock:ro
      - ./config/promtail.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - backend

  grafana:
    image: docker.io/grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  loki-data:
  grafana-data: