# docker-compose.yml
version: "3.9"

services:

  # ==========================================
  # DATABASE
  # ==========================================
  
  postgres:
    image: docker.io/library/postgres:${POSTGRES_VERSION}-alpine
    container_name: ${CONTAINER_POSTGRES}
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${PORT_POSTGRES}:5432"  
    volumes:
      - ${VOLUME_POSTGRES:-postgres-data}:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - ${NETWORK_BACKEND}


  # ==========================================
  # MESSAGE BROKER (RabbitMQ)
  # ==========================================
  rabbitmq:
    image: docker.io/library/rabbitmq:${RABBITMQ_VERSION}-management-alpine # Includes Management UI
    container_name: ${RABBITMQ_CONTAINER_NAME}
    hostname: ${RABBITMQ_HOST_NAME}
    environment:
      # Standard credentials (should be set via .env!)
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672" # Standard AMQP Port
      - "${RABBITMQ_MANAGEMENT_PORT}:15672" # Management UI Port
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - ${NETWORK_BACKEND}
    restart: always

  # ==========================================
  # SERVICES
  # ==========================================

  gateway:
    container_name: ${CONTAINER_GATEWAY}
    build:
      context: . 
      dockerfile: app/backend/gateway/Dockerfile
      target: dev
      args:
        GO_VERSION: ${GO_VERSION}
    ports:
      - "${PORT_GATEWAY}:8080"   # Only gateway is exposed to host
    volumes:
      - ./app/backend/gateway:/build/app/backend/gateway:cached
      - ./shared/go:/build/shared/go:cached
      - ./shared/data:/build/shared/data:cached 
      - /build/app/backend/gateway/tmp
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_NAME}?sslmode=${DB_SSLMODE_DEV:-disable}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 5
      start_period: 10s
    depends_on:
      service-a:
        condition: service_healthy
      service-b:
        condition: service_healthy
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - ${NETWORK_FRONTEND}
      - ${NETWORK_BACKEND}

  service-a:
    container_name: ${CONTAINER_SERVICE_A}
    build:
      context: .
      dockerfile: app/backend/service-a/Dockerfile
      target: dev
      args:
        GO_VERSION: ${GO_VERSION}
    expose:
      - "8080"
    volumes:
      - ./app/backend/service-a:/build/app/backend/service-a:cached
      - ./shared/go:/build/shared/go:cached
      - ./shared/data:/build/shared/data:cached 
      - /build/app/backend/service-a/tmp
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_NAME}?sslmode=${DB_SSLMODE_DEV:-disable}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - ${NETWORK_BACKEND}

  service-b:
    container_name: ${CONTAINER_SERVICE_B}
    build:
      context: .
      dockerfile: app/backend/service-b/Dockerfile
      target: dev
      args:
        GO_VERSION: ${GO_VERSION}
    expose:
      - "8080"
    volumes:
      - ./app/backend/service-b:/build/app/backend/service-b:cached
      - ./shared/go:/build/shared/go:cached
      - ./shared/data:/build/shared/data:cached 
      - /build/app/backend/service-b/tmp
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${PORT_POSTGRES}/${POSTGRES_NAME}?sslmode=${DB_SSLMODE_DEV}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 2s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy  
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    networks:
      - ${NETWORK_BACKEND}


  # ==========================================
  # LOGGING STACK (NEU)
  # ==========================================
  
  loki:
    image: docker.io/grafana/loki:2.9.0
    container_name: ${CONTAINER_LOKI}
    ports:
      - "${PORT_LOKI}:3100"
    volumes:
      - ./config/loki.yaml:/etc/loki/local-config.yaml
      - ${VOLUME_LOKI:-loki-data}:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - ${NETWORK_BACKEND}

  promtail:
    image: docker.io/grafana/promtail:2.9.0
    container_name: ${CONTAINER_PROMTAIL}
    volumes:
      - /run/user/1000/podman/podman.sock:/var/run/docker.sock:ro
      - ./config/promtail.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - ${NETWORK_BACKEND}

  grafana:
    image: docker.io/grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "${PORT_GRAFANA}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ${VOLUME_GRAFANA}:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - loki
    networks:
      - ${NETWORK_BACKEND}

networks:
  frontend:
    name: ${NETWORK_FRONTEND}
    driver: bridge
  backend:
    name: ${NETWORK_BACKEND}
    driver: bridge

volumes:
  loki-data:
    name: ${VOLUME_LOKI}
  grafana-data:
    name: ${VOLUME_GRAFANA}
  postgres-data:
    name: ${VOLUME_POSTGRES}